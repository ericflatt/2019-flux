"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var unprefixDraftId_1 = require("./unprefixDraftId");
var defaultResolveOptions = {
    maxDepth: 5,
    overlayDrafts: false,
};
// NOTE: This is now a public API and should be treated as such
function resolveReferences(obj, context, options, currentDepth) {
    if (options === void 0) { options = {}; }
    if (currentDepth === void 0) { currentDepth = 0; }
    var createNodeId = context.createNodeId, getNode = context.getNode;
    var resolveOptions = __assign({}, defaultResolveOptions, options);
    var overlayDrafts = resolveOptions.overlayDrafts, maxDepth = resolveOptions.maxDepth;
    if (Array.isArray(obj)) {
        return currentDepth <= maxDepth
            ? obj.map(function (item) { return resolveReferences(item, context, resolveOptions, currentDepth + 1); })
            : obj;
    }
    if (obj === null || typeof obj !== 'object') {
        return obj;
    }
    if (typeof obj._ref === 'string') {
        var id = obj._ref;
        var node = getNode(createNodeId(overlayDrafts ? unprefixDraftId_1.unprefixDraftId(id) : id));
        return node && currentDepth <= maxDepth
            ? resolveReferences(node, context, resolveOptions, currentDepth + 1)
            : obj;
    }
    var initial = {};
    return Object.keys(obj).reduce(function (acc, key) {
        var isGatsbyRef = key.endsWith('___NODE');
        var isRawDataField = key.startsWith('_rawData');
        var targetKey = isGatsbyRef && currentDepth <= maxDepth ? key.slice(0, -7) : key;
        var value = obj[key];
        if (isGatsbyRef && currentDepth <= maxDepth) {
            value = resolveGatsbyReference(obj[key], context);
        }
        value = resolveReferences(value, context, resolveOptions, currentDepth + 1);
        if (isRawDataField) {
            targetKey = "_raw" + key.slice(8);
        }
        acc[targetKey] = value;
        return acc;
    }, initial);
}
exports.resolveReferences = resolveReferences;
function resolveGatsbyReference(value, context) {
    var getNode = context.getNode;
    if (typeof value === 'string') {
        return getNode(value);
    }
    else if (Array.isArray(value)) {
        return value.map(function (id) { return getNode(id); });
    }
    else {
        throw new Error("Unknown Gatsby node reference: " + value);
    }
}
//# sourceMappingURL=resolveReferences.js.map