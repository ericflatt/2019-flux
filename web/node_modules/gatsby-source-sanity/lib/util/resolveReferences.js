"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const unprefixDraftId_1 = require("./unprefixDraftId");
const defaultResolveOptions = {
    maxDepth: 5,
    overlayDrafts: false,
};
// NOTE: This is now a public API and should be treated as such
function resolveReferences(obj, context, options = {}, currentDepth = 0) {
    const { createNodeId, getNode } = context;
    const resolveOptions = Object.assign({}, defaultResolveOptions, options);
    const { overlayDrafts, maxDepth } = resolveOptions;
    if (Array.isArray(obj)) {
        return currentDepth <= maxDepth
            ? obj.map(item => resolveReferences(item, context, resolveOptions, currentDepth + 1))
            : obj;
    }
    if (obj === null || typeof obj !== 'object') {
        return obj;
    }
    if (typeof obj._ref === 'string') {
        const id = obj._ref;
        const node = getNode(createNodeId(overlayDrafts ? unprefixDraftId_1.unprefixDraftId(id) : id));
        return node && currentDepth <= maxDepth
            ? resolveReferences(node, context, resolveOptions, currentDepth + 1)
            : obj;
    }
    const initial = {};
    return Object.keys(obj).reduce((acc, key) => {
        const isGatsbyRef = key.endsWith('___NODE');
        const isRawDataField = key.startsWith('_rawData');
        let targetKey = isGatsbyRef && currentDepth <= maxDepth ? key.slice(0, -7) : key;
        let value = obj[key];
        if (isGatsbyRef && currentDepth <= maxDepth) {
            value = resolveGatsbyReference(obj[key], context);
        }
        value = resolveReferences(value, context, resolveOptions, currentDepth + 1);
        if (isRawDataField) {
            targetKey = `_raw${key.slice(8)}`;
        }
        acc[targetKey] = value;
        return acc;
    }, initial);
}
exports.resolveReferences = resolveReferences;
function resolveGatsbyReference(value, context) {
    const { getNode } = context;
    if (typeof value === 'string') {
        return getNode(value);
    }
    else if (Array.isArray(value)) {
        return value.map(id => getNode(id));
    }
    else {
        throw new Error(`Unknown Gatsby node reference: ${value}`);
    }
}
//# sourceMappingURL=resolveReferences.js.map