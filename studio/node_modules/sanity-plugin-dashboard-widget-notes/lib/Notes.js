"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _md = require("react-icons/md");

var _dateFns = require("date-fns");

var _polished = require("polished");

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _Notes = _interopRequireDefault(require("./Notes.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

(function () {
  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;
  enterModule && enterModule(module);
})();

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal["default"].signature : function (a) {
  return a;
};

var Notes =
/*#__PURE__*/
function (_Component) {
  _inherits(Notes, _Component);

  function Notes(props) {
    var _this;

    _classCallCheck(this, Notes);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Notes).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "componentWillMount", function () {
      _client["default"].createIfNotExists({
        _id: 'dashboard.note',
        _type: 'dashboardNote',
        notes: ''
      });
    });

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", function () {
      _client["default"].getDocument('dashboard.note').then(function (_ref) {
        var _updatedAt = _ref._updatedAt,
            notes = _ref.notes;

        _this.setState({
          _updatedAt: _updatedAt,
          notes: notes,
          draftNotes: notes
        });
      });

      _this.unsubscribe();

      _this.subscription = _client["default"].listen("*[_id == 'dashboard.note']").subscribe(function (_ref2) {
        var result = _ref2.result;
        var _updatedAt = result._updatedAt,
            notes = result.notes;

        _this.setState({
          _updatedAt: _updatedAt,
          notes: notes,
          draftNotes: notes
        });
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (e) {
      _this.setState({
        draftNotes: e.target.value,
        isCreatingDraft: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleSubmit", function () {
      var draftNotes = _this.state.draftNotes;

      _this.setState({
        isSaving: true
      });

      _client["default"].patch('dashboard.note').set({
        notes: draftNotes
      }).commit().then(function (updatedDocument) {
        _this.setState({
          _updatedAt: updatedDocument._updatedAt,
          // eslint-disable-line no-underscore-dangle
          notes: draftNotes,
          isCreatingDraft: false,
          isSaving: false
        });
      })["catch"](function (err) {
        _this.setState({
          isSaving: false
        });

        console.error('Oh no, the update failed: ', err.message); // eslint-disable-line no-console
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleDiscard", function () {
      var notes = _this.state.notes;

      _this.setState({
        draftNotes: notes,
        isCreatingDraft: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "componentWillUnmount", function () {
      _this.unsubscribe();
    });

    _this.state = {
      _updatedAt: null,
      notes: '',
      draftNotes: '',
      isCreatingDraft: false,
      isSaving: false
    };
    return _this;
  }

  _createClass(Notes, [{
    key: "unsubscribe",
    value: function unsubscribe() {
      if (this.subscription) {
        this.subscription.unsubscribe();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          error = _this$state.error,
          _updatedAt = _this$state._updatedAt,
          draftNotes = _this$state.draftNotes,
          isCreatingDraft = _this$state.isCreatingDraft,
          isSaving = _this$state.isSaving;
      var _this$props = this.props,
          title = _this$props.title,
          placeholder = _this$props.placeholder,
          backgroundColor = _this$props.backgroundColor,
          color = _this$props.color;
      var timestamp = (0, _dateFns.format)(_updatedAt, 'MMM D, YYYY, h:mm A Z');
      var textColor = color || (0, _polished.readableColor)(backgroundColor, 'rgb(48, 48, 48)');
      return _react["default"].createElement("div", {
        className: _Notes["default"].container
      }, isSaving && _react["default"].createElement("div", {
        className: _Notes["default"].spinnerContainer
      }, _react["default"].createElement(_spinner["default"], {
        center: true,
        message: "Saving notes\u2026"
      })), _react["default"].createElement("header", {
        className: _Notes["default"].header,
        style: {
          backgroundColor: (0, _polished.shade)(0.05, backgroundColor),
          color: textColor
        }
      }, _react["default"].createElement("h2", {
        className: _Notes["default"].title
      }, title, _react["default"].createElement(_md.MdSpeakerNotes, {
        className: _Notes["default"].headerIcon,
        style: {
          fill: textColor
        }
      }), _updatedAt && _react["default"].createElement("span", {
        title: timestamp
      }, "Edited ".concat((0, _dateFns.distanceInWordsToNow)(_updatedAt, {
        addSuffix: true
      }))))), error ? _react["default"].createElement("div", {
        className: _Notes["default"].content,
        style: {
          backgroundColor: backgroundColor
        }
      }, _react["default"].createElement("code", null, "Could not load notes \u2026")) : _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement("div", {
        className: _Notes["default"].content,
        style: {
          backgroundColor: backgroundColor
        }
      }, _react["default"].createElement("textarea", {
        spellCheck: "false",
        className: _Notes["default"].textarea,
        name: "notes",
        value: draftNotes,
        onChange: this.handleChange,
        placeholder: placeholder,
        style: {
          color: textColor
        }
      })), _react["default"].createElement("div", {
        className: _Notes["default"].footer,
        style: {
          borderTopColor: (0, _polished.shade)(0.05, backgroundColor)
        }
      }, _react["default"].createElement(_default3["default"], {
        bleed: true,
        color: "primary",
        kind: "simple",
        onClick: this.handleSubmit,
        disabled: !isCreatingDraft
      }, "Save notes"), _react["default"].createElement(_default3["default"], {
        bleed: true,
        color: "danger",
        kind: "simple",
        onClick: this.handleDiscard,
        disabled: !isCreatingDraft
      }, "Discard changes"))));
    }
  }, {
    key: "__reactstandin__regenerateByEval",
    // @ts-ignore
    value: function __reactstandin__regenerateByEval(key, code) {
      // @ts-ignore
      this[key] = eval(code);
    }
  }]);

  return Notes;
}(_react.Component);

Notes.propTypes = {
  title: _propTypes["default"].string,
  placeholder: _propTypes["default"].string,
  backgroundColor: _propTypes["default"].string,
  color: _propTypes["default"].string
};
Notes.defaultProps = {
  title: 'Notes',
  placeholder: '…',
  backgroundColor: '#ffff88',
  color: null
};
var _default = Notes;
var _default2 = _default;
exports["default"] = _default2;
;

(function () {
  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(Notes, "Notes", "/Users/kolby/Source/sanity-studio/plugins/sanity-plugin-dashboard-widget-notes/src/Notes.js");
  reactHotLoader.register(_default, "default", "/Users/kolby/Source/sanity-studio/plugins/sanity-plugin-dashboard-widget-notes/src/Notes.js");
})();

;

(function () {
  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;
  leaveModule && leaveModule(module);
})();